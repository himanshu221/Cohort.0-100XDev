/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  
  app.use(bodyParser.json());

  class Todo{
    todoMap;
    constructor(){
      this.todoMap = new Map();
    }
    add(todoItem){
      let id = Math.floor(Math.random()*1000000);
      todoItem["id"] = id.toString();
      this.todoMap.set(id.toString(),todoItem)
      return id;
    }

    get(id){
      return this.todoMap.get(id);
    }

    getAll(){
      let todoList = [];
      let iter = this.todoMap.values();
      let element = iter.next();
      while(!element.done){
          todoList.push(element.value);
          element = iter.next();
      }
      return todoList;
    }

    update(id, todoItem){
      if(this.todoMap.has(id)){
        todoItem["id"] = id.toString();
        this.todoMap.set(id, todoItem);
        return true;
      }
      else return false;
    } 

    delete(id){
      if(this.todoMap.has(id)){
        this.todoMap.delete(id);
        return true;
      }else{
        return false;
      }

    }

  }

  let todo = new Todo();

  app.post("/todos",(req, resp) => {
    let todoItem = req.body;
    let id = todo.add(todoItem);
    resp.statusCode = "201";
    console.log("Added a new item with id : " + id)
    resp.send({
      "id": id.toString()
    })
  })

  app.get("/todos", (req, resp) => {
    resp.send(JSON.stringify(todo.getAll()))
  })

  app.get("/todos/:id", (req, resp) => {
    let id = req.params.id;
    let itemList = todo.get(id);

    if(typeof itemList === 'undefined'){
      resp.statusCode = 404;
      resp.send("Todo Not Found!")
    }else{
      resp.statusCode = 200;
      resp.send(JSON.stringify(itemList));
    }
  })

  app.put("/todos/:id", (req, resp) => {
    let id = req.params.id;
    let todoItem = req.body;
    let isupdated = todo.update(id, todoItem);

    if(isupdated){
      resp.statusCode = 200;
      resp.send("Updated the todo")
    }else{
      resp.statusCode = 404
      resp.send("Todo not found!")
    }
  })

  app.delete("/todos/:id", (req, resp) => {
      let id = req.params.id;
      let isDeleted = todo.delete(id);

      if(isDeleted){
        resp.statusCode = 200;
        resp.send("Todo is deleted")
      }else{
        resp.statusCode = 404;
        resp.send("Todo not found!")
      }
  })

  
  module.exports = app;